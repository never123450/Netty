2020年12月01日21:10:31

各层的主要功能
低三层
    物理层:使原始的数据比特流能在物理介质上传输。
    数据链路层:通过校验、确认和反馈重发等手段，形成稳定的数据链路。(01010101)。
    网络层:进行路由选择和流量控制。 (IP协议)

传输层:提供可靠的端口到端口的数据传输服务(TCP/UDP协议) 。

高三层
    会话层:负责建立、管理和终止进程之间的会话和数据交换。
    表示层:负责数据格式转换、数据加密与解密、压缩与解压缩等。
    应用层:为用户的应用进程提供网络服务。

传输控制协议TCP

传输控制协议(TCP)是Internet一个重要的传输层协议。TCP提供面向连接、可靠、有序、字节流传输服务。
应用程序在使用TCP之前，必须先建立TCP连接。

源端口号(16位)
目的端口号(16位)

标志位说明:
    URG:紧急指针
    ACK:确认序号
    PSH:有DATA数据传输
    RST:连接重置
    SYN:建立连接
    FIN:关闭连接

TCP 握手机制
    三次握手过程:

    客户端                                                 服务端
    SYN_SEND 等待确认
                           SYN=1 seq=x
                    --------------------------->

                                                    SYN_RECV(收到请求 等待确认)
                          SYN=1,ACK=1
                        seq=y,ack_seq=x+1
                    <---------------------------

    ESTABLISHED
    建立连接
                    seq=x+1,ack_seq=y+1,ACK=1
                    --------------------------->     ESTABLISHED(建立连接)


    四次挥手:

            客户端                                                 服务端
        FIN_WAIT_1 等待确认
                               FIN=1 seq=u
                        --------------------------->

                                                        CLOSE_WAIT 半关闭
                                ACK=1
                            seq=v,ack_seq=u+1
                        <---------------------------

        FIN_WAIT_1
        等待释放
                                FIN=1,ACK=1
                            seq=w,ack_seq=u+1
                        <---------------------------     LAST_ACK 等待确认

         TIME_WAIT       seq=u+1,ack_seq=w+1,ACK=1
         等待一会儿      --------------------------->     CLOSE 关闭连接

        CLOSE 关闭连接


用户数据报协议UDP
用户数据报协议UDP是Internet传输层协议。
提供无连接、不可靠、数据报尽力传输服务。

IP首部                IP数据部分
           UDP首部               UDP数据部分
        源端口号(2字节)         目的端口号(2字节)
        长度(2字节)             校验和(2字节)
                     应用数据


开发应用人员在UDP.上构建应用,关注以下几点:
1.应用进程更容易控制发送什么数据以及何时发送
2.无需建立连接
3.无连接状态
4.首部开销小

UDP 和 TCP 的比较

        TCP             UDP
      面向连接          无连接
    提供可靠性保证       不可靠
        慢               快
      资源占用多       资源占用少

什么情况下用 UDP?
对数据可靠性要求不高,比如音视频聊天,日志上报


Socket编程
    Internet中 应用最广泛的网络应用编程接口，实现与3种底层协议接口:
    数据报类型套接字SOCK_DGRAM |(面向UDP接口)|
    流式套接字SOCK_STREAM |(面向TCP接口)
    原始套接字SOCK_RAW |(面向网络层协议接口IP、ICMP等)

主要socket API及其调用过程
    创建套接字->端点绑定->发送数据->接收数据->释放套接字

Socket API函数定义
    listen()、 accept()函数只能用于服务器端;
    connect()函数只能用于客户端;
    socket()、 bind()、 send()、 recv()、 sendto()、recvfrom()、 close()


Http协议-请求数据包解析

GET /servlet-demo- 1.0.0/index HTTP/1.1
Cache-Control: max- age=0
Accept: text/html
Accept-Language: zh-Hans-CN,zh-Hans;q=0.5
Upgrade-Insecure- Requests: 1
User-Agent: Chrome/64.0.3282.140
Accept-Encoding: gzip, deflate
Host: 127.0.0.1:8080
Connection: Keep-Alive

第一部分:请求行，请求类型，资源路径以及HTTP版本。
第二部分:请求头部，紧接着请求行(即第一行)之后的部分，用来说明服务器要使用的附加信息
第三部分:空行，请求头部后面的空行是必须的请求头部和数据主体之间必须有换行
第四部分:请求数据也叫主体，可以添加任意的数据。这个例子的请求数据为空。


Http协议-响应数据包解析

    HTTP/1.1 200 OK
    Content-Length: 11
    Hello World

第一部分:状态行。HTTP版本、状态码、状态消息。
第二部分:响应报头部，紧接着请求行(即第一行)之后的部分，用来说明服务器要使用的附加信息
第三部分:空行，头部后面的空行是必须的头部和数据主体之间必须有换行
第四部分:响应正文。可以添加任意的数据。这个例子的响应正文为“Hello World”。


Http协议-响应状态码

    1xx (临时响应)
        表示临时响应并需要请求者继续执行操作的状态代码
    2xx (成功)
        表示成功处理了请求的状态代码。
    3xx (重定向)
        表示要完成请求，需要进一步操作。通常， 这些状态代码用来重定向。
    4xx (请求错误)
        这些状态代码表示请求可能出错，妨碍了服务器的处理。
    5xx (服务器错误)
        这些状态代码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。


BIO-阻塞I0的含义

    阻塞(blocking) I0: 资源不可用时，I0请求一直阻塞，直到反馈结果(有 数据或超时)。
    非阻塞(non-blocking) I0:资源不可用时，I0请求离开返回，返回数据标识资源不可用。
    同步(synchronous) I0: 应用阻塞在发送或接收数据的状态，直到数据成功传输或返回失败。
    异步(asynchronous) I0: 应用发送或接收数据后立刻返回，实际处理是异步执行的。

***阻塞和非阻塞是获取资源的方式，同步/异步是程序如何处理资源的逻辑设计。***
代码中使用的API: ServerSocket#accept、 InputStream#read 都是阻塞的API。操作系统底
层API中，默认Socket操作都是Blocking型，send/recv等 接口都是阻塞的。

带来的问题:阻塞导致在处理网络 I/O时,一个线程只能处理一个网络连接



Buffer缓冲区
    缓冲区本质上是一个可以写入数据的内存块(类似数组)，然后可以再次读取。此内存块包含在NIO Buffer
    对象中，该对象提供了一组方法，可以更轻松地使用内存块。相比较直接对数组的操作，Buffer API更加容易操作和管理。
使用Buffer进行数据写入与读取，需要进行如下四个步骤:
    1.将数据写 入缓冲区
    2.调用buffer.flip()， 转换为读取模式
    3.缓冲区读取数据
    4.调用buffer.clear()或buffer.compact()清除缓冲区

Buffer工作原理
Buffer三个重要属性:
capacity容量:作为一个内存块，Buffer具有 一定的固定大小，也称为“容量” 。
position位置:写入模式时代表写数据的位置。读取模式时代表读取数据的位置。
limit限制:写入模式，限制等于buffer的容量。读取模式下，limit等于写入的数据量。


ByteBuffer内存类型
ByteBuffer为性能关键型代码提供了直接内存(direct堆外)和非直接内存(heap堆)两种实现。
堆外内存获取的方式: ByteBuffer directByteBuffer = ByteBuffer.allocateDirect(noBytes);
好处:
1、进行网络I0或者 文件I0时比heapBuffer少一次拷贝。(ile/socket ---- OS memory ---- jvm heap)
GC会移动对象内存，在写file或socket的过程中，JVM的实现中， 会先把数据复制到堆外，再进行写入。
2、GC范围之外， 降低GC压力，但实现了自动管理。DirectByteBuffer中有一个Cleaner对象
(PhantomReference)，Cleaner被GC前 会执行clean方法，触发DirectByteBuffer中定义 的Deallocator

建议:
1、性能确实可观的时候才去使用;分配给大型、长寿命;
(网络传输、文件读写场景)
2、通过虚拟机参数MaxDirectMemorySize限制大小，防止耗尽整个机器的内存;


Channel 通道

              byte[]数据写入                                网络                              代码读取内容
代码   ---------------------------> outputStream  -------------------------> inputStream ----------------------> 代码
                                                                                            read 阻塞读取

                      缓冲器数据                     通道数据
代码   -----buffer-----------------> channel  -------------------------> buffer ----------------------> 代码
                       写入通道                     写入缓冲区

Channel 的 API 涵盖了UDP/TCP 网络和文件 IO
    FIleChannel,DatagramChannel,SocketChannel,ServerSocketChannel
    和标准 IO Stream操作的区别:
        在一个通道内进行读取和写入,stream 通常是单向的(input 或 output)
        可以非阻塞读取和写入通道
        通道始终读取或写入缓冲区


SocketChannel
SocketChannel用于建立TCP网络连接，类似java.net.Socket。 有两种创建socketChannel形式:
1.客户 端主动发起和服务器的连接。
2.服务 端获取的新连接。
//客户端主动发起连接的方式
SocketChannel socketChannel = SocketChannel.open () ;
socketChannel .configureBlocking( false );//设置为非阻塞模式
socketChannel.connect (new InetSocketAddress (“http://163.com” ，80) ) ;
channel.write(byteBuffer);// 发送请求数据-向通道写 入数据
int bytesRead =socketChannel.read ( byteBuffer) ;//读取服务端返回-读取缓冲区 的数据
socketChannel.close (); //关闭连接

write写: write()在尚未写 入任何内容时就可能返回了。需要在循环中调用write()。
read读: read()方 法可能直接返回而根本不读取任何数据，根据返回的int值判断读取了多少字节。

ServerSocketChannel
ServerSocketChannel可以监听新建的TCP连接通道，类似ServerSocket。
//创建网络服务端
ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
serverSocketChannel.configureBlocking(false); //设置为非阻塞模式
serverSocketChannel.socket().bind(new InetSocketAddress(8080)); //绑定端口
while(true){
SocketChannel socketChannel= serverSocketChannel.accept(); //获取新tcp连接通道
if(socketChannel !:= nul){
// tcp请求读取/响应
serverSocketChannelaccept():如果该通道处于非阻塞模式，那么如果没有挂起的连接，该方法将立即返
回null。必须检查返回的SocketChannel是否为null。
这种低效的循环检查，会是NIO服务端的正确开发方式嘛?

Selector选择器
Selector是一个Java NIO组件，可以检查一个或多个NIO通道，并确定哪些通道已准备好进行读取或
写入。实现单个线程可以管理多个通道，从而管理多个网络连接。

一个线程使用 Selector 监听多个 channel 的不同事件:
四个事件分别对应 SelectionKey 四个常量。
1. Connect 连接(SelectionKey.OP_ _CONNECT)
2. Accept 准备就绪(OP_ _ACCEPT)
3. Read 读取(OP_ READ)
4. Write 写入(OP_ _WRITE)

            Thread
           Selector
Channel     Channel      Channel


Selector选择器
实现一个线程处理多个通道的核心概念理解:事件驱动机制。
非阻塞的网络通道下，开发者通过Selector注册对于通道感兴趣的事件类型，线程通过监听事件来
触发相应的代码执行。(拓展: 更底层是操作系统的多路复用机制)
Selector selector = Selector.open();
channel.configureBlocking(false);
SelectionKey key = channel.register(selector, SelectionKey.OP READ); //注册感兴趣的事件
while(true) {//由accept轮询，变成了事件通知的方式。
int readyChannels = selector.select(); // select收到新的事件，方法才会返回
if(readyChannels == 0) continue;
Set<SelectionKey> selectedKeys = selector.selectedKeys();
Iterator<SelectionKey> keylterator = selectedKeys.iterator();
while(keylterator.hasNext()) {
SelectionKey key = keylterator.next();
//判断不同的事件类型，执行对应的逻辑处理
// key.isAcceptable() / key.isConnectable() / key.isReadable() / key.isWritable(}
keylterator.remove();}



NIO对比BI0

BIO线程模型
阻塞lO，线程等待时间长
线程-2 read..write
●一个线程负责一个连接处理
线程多且利用率低

NIO线程模型
单个线程
非阻塞I0，线程利用率更高
●一个线程处理多个连接事件
事件通知机制
性能更强大

如果你的程序需要支撑大量的连接，使用NIO是最好的方式。
Tomcat8中，已经完全去除BIO相关的网络处理代码，默认采用NIO进行网络处理。


Netty简介
Netty是一个高性能、高可扩展性的异步事件驱动的网络应用程序框架，它极大地简
化了TCP和UDP客户端和服务器开发等网络编程。
Netty重要的四个内容:
1) Reactor线程模型: -种高性能的多线程程序设计思路
2) Netty中 自己定义的Channel概念:增强版的通道概念
3) ChannelPipeline职责链设计模式:事件处理机制
4) 内存管理:增强的ByteBuf缓冲区


Netty整体结构图
1、 支持Socket等多种传输方式;Legacy Text . Binary Protocols In-VM Pipe
with Unit Testability
2、提供 了多种协议的编解码实现;Extensible Event Model
3、核心设计包含 事件处理模型、APIUniversal Communication API的使用、ByteBuffer的增 强
Zero-Copy-Capable Rich Byte Buffer

Netty线程模型
为了让NIO处理更好的利用多线程特性，Netty实现了Reactor线程模型。
Reactor模型中有四个核心概念:
1) Resources 资源(请求/任务)
2) Synchronous Event Demultiplexer同步事件复用器
3) Dispatcher 分配器
4) Request Handler请求处理器

