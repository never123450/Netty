2020年12月01日21:10:31

各层的主要功能
低三层
    物理层:使原始的数据比特流能在物理介质上传输。
    数据链路层:通过校验、确认和反馈重发等手段，形成稳定的数据链路。(01010101)。
    网络层:进行路由选择和流量控制。 (IP协议)

传输层:提供可靠的端口到端口的数据传输服务(TCP/UDP协议) 。

高三层
    会话层:负责建立、管理和终止进程之间的会话和数据交换。
    表示层:负责数据格式转换、数据加密与解密、压缩与解压缩等。
    应用层:为用户的应用进程提供网络服务。

传输控制协议TCP

传输控制协议(TCP)是Internet一个重要的传输层协议。TCP提供面向连接、可靠、有序、字节流传输服务。
应用程序在使用TCP之前，必须先建立TCP连接。

源端口号(16位)
目的端口号(16位)

标志位说明:
    URG:紧急指针
    ACK:确认序号
    PSH:有DATA数据传输
    RST:连接重置
    SYN:建立连接
    FIN:关闭连接

TCP 握手机制
    三次握手过程:

    客户端                                                 服务端
    SYN_SEND 等待确认
                           SYN=1 seq=x
                    --------------------------->

                                                    SYN_RECV(收到请求 等待确认)
                          SYN=1,ACK=1
                        seq=y,ack_seq=x+1
                    <---------------------------

    ESTABLISHED
    建立连接
                    seq=x+1,ack_seq=y+1,ACK=1
                    --------------------------->     ESTABLISHED(建立连接)


    四次挥手:

            客户端                                                 服务端
        FIN_WAIT_1 等待确认
                               FIN=1 seq=u
                        --------------------------->

                                                        CLOSE_WAIT 半关闭
                                ACK=1
                            seq=v,ack_seq=u+1
                        <---------------------------

        FIN_WAIT_1
        等待释放
                                FIN=1,ACK=1
                            seq=w,ack_seq=u+1
                        <---------------------------     LAST_ACK 等待确认

         TIME_WAIT       seq=u+1,ack_seq=w+1,ACK=1
         等待一会儿      --------------------------->     CLOSE 关闭连接

        CLOSE 关闭连接


用户数据报协议UDP
用户数据报协议UDP是Internet传输层协议。
提供无连接、不可靠、数据报尽力传输服务。

IP首部                IP数据部分
           UDP首部               UDP数据部分
        源端口号(2字节)         目的端口号(2字节)
        长度(2字节)             校验和(2字节)
                     应用数据


开发应用人员在UDP.上构建应用,关注以下几点:
1.应用进程更容易控制发送什么数据以及何时发送
2.无需建立连接
3.无连接状态
4.首部开销小

UDP 和 TCP 的比较

        TCP             UDP
      面向连接          无连接
    提供可靠性保证       不可靠
        慢               快
      资源占用多       资源占用少

什么情况下用 UDP?
对数据可靠性要求不高,比如音视频聊天,日志上报


Socket编程
    Internet中 应用最广泛的网络应用编程接口，实现与3种底层协议接口:
    数据报类型套接字SOCK_DGRAM |(面向UDP接口)|
    流式套接字SOCK_STREAM |(面向TCP接口)
    原始套接字SOCK_RAW |(面向网络层协议接口IP、ICMP等)

主要socket API及其调用过程
    创建套接字->端点绑定->发送数据->接收数据->释放套接字

Socket API函数定义
    listen()、 accept()函数只能用于服务器端;
    connect()函数只能用于客户端;
    socket()、 bind()、 send()、 recv()、 sendto()、recvfrom()、 close()


Http协议-请求数据包解析

GET /servlet-demo- 1.0.0/index HTTP/1.1
Cache-Control: max- age=0
Accept: text/html
Accept-Language: zh-Hans-CN,zh-Hans;q=0.5
Upgrade-Insecure- Requests: 1
User-Agent: Chrome/64.0.3282.140
Accept-Encoding: gzip, deflate
Host: 127.0.0.1:8080
Connection: Keep-Alive

第一部分:请求行，请求类型，资源路径以及HTTP版本。
第二部分:请求头部，紧接着请求行(即第一行)之后的部分，用来说明服务器要使用的附加信息
第三部分:空行，请求头部后面的空行是必须的请求头部和数据主体之间必须有换行
第四部分:请求数据也叫主体，可以添加任意的数据。这个例子的请求数据为空。


Http协议-响应数据包解析

    HTTP/1.1 200 OK
    Content-Length: 11
    Hello World

第一部分:状态行。HTTP版本、状态码、状态消息。
第二部分:响应报头部，紧接着请求行(即第一行)之后的部分，用来说明服务器要使用的附加信息
第三部分:空行，头部后面的空行是必须的头部和数据主体之间必须有换行
第四部分:响应正文。可以添加任意的数据。这个例子的响应正文为“Hello World”。


Http协议-响应状态码

    1xx (临时响应)
        表示临时响应并需要请求者继续执行操作的状态代码
    2xx (成功)
        表示成功处理了请求的状态代码。
    3xx (重定向)
        表示要完成请求，需要进一步操作。通常， 这些状态代码用来重定向。
    4xx (请求错误)
        这些状态代码表示请求可能出错，妨碍了服务器的处理。
    5xx (服务器错误)
        这些状态代码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。


BIO-阻塞I0的含义

    阻塞(blocking) I0: 资源不可用时，I0请求一直阻塞，直到反馈结果(有 数据或超时)。
    非阻塞(non-blocking) I0:资源不可用时，I0请求离开返回，返回数据标识资源不可用。
    同步(synchronous) I0: 应用阻塞在发送或接收数据的状态，直到数据成功传输或返回失败。
    异步(asynchronous) I0: 应用发送或接收数据后立刻返回，实际处理是异步执行的。

***阻塞和非阻塞是获取资源的方式，同步/异步是程序如何处理资源的逻辑设计。***
代码中使用的API: ServerSocket#accept、 InputStream#read 都是阻塞的API。操作系统底
层API中，默认Socket操作都是Blocking型，send/recv等 接口都是阻塞的。

带来的问题:阻塞导致在处理网络 I/O时,一个线程只能处理一个网络连接



Buffer缓冲区
    缓冲区本质上是一个可以写入数据的内存块(类似数组)，然后可以再次读取。此内存块包含在NIO Buffer
    对象中，该对象提供了一组方法，可以更轻松地使用内存块。相比较直接对数组的操作，Buffer API更加容易操作和管理。
使用Buffer进行数据写入与读取，需要进行如下四个步骤:
    1.将数据写 入缓冲区
    2.调用buffer.flip()， 转换为读取模式
    3.缓冲区读取数据
    4.调用buffer.clear()或buffer.compact()清除缓冲区

Buffer工作原理
Buffer三个重要属性:
capacity容量:作为一个内存块，Buffer具有 一定的固定大小，也称为“容量” 。
position位置:写入模式时代表写数据的位置。读取模式时代表读取数据的位置。
limit限制:写入模式，限制等于buffer的容量。读取模式下，limit等于写入的数据量。


ByteBuffer内存类型
ByteBuffer为性能关键型代码提供了直接内存(direct堆外)和非直接内存(heap堆)两种实现。
堆外内存获取的方式: ByteBuffer directByteBuffer = ByteBuffer.allocateDirect(noBytes);
好处:
1、进行网络I0或者 文件I0时比heapBuffer少一次拷贝。(ile/socket ---- OS memory ---- jvm heap)
GC会移动对象内存，在写file或socket的过程中，JVM的实现中， 会先把数据复制到堆外，再进行写入。
2、GC范围之外， 降低GC压力，但实现了自动管理。DirectByteBuffer中有一个Cleaner对象
(PhantomReference)，Cleaner被GC前 会执行clean方法，触发DirectByteBuffer中定义 的Deallocator

建议:
1、性能确实可观的时候才去使用;分配给大型、长寿命;
(网络传输、文件读写场景)
2、通过虚拟机参数MaxDirectMemorySize限制大小，防止耗尽整个机器的内存;


Channel 通道

              byte[]数据写入                                网络                              代码读取内容
代码   ---------------------------> outputStream  -------------------------> inputStream ----------------------> 代码
                                                                                            read 阻塞读取

                      缓冲器数据                     通道数据
代码   -----buffer-----------------> channel  -------------------------> buffer ----------------------> 代码
                       写入通道                     写入缓冲区

Channel 的 API 涵盖了UDP/TCP 网络和文件 IO
    FIleChannel,DatagramChannel,SocketChannel,ServerSocketChannel
    和标准 IO Stream操作的区别:
        在一个通道内进行读取和写入,stream 通常是单向的(input 或 output)
        可以非阻塞读取和写入通道
        通道始终读取或写入缓冲区


SocketChannel
SocketChannel用于建立TCP网络连接，类似java.net.Socket。 有两种创建socketChannel形式:
1.客户 端主动发起和服务器的连接。
2.服务 端获取的新连接。
//客户端主动发起连接的方式
SocketChannel socketChannel = SocketChannel.open () ;
socketChannel .configureBlocking( false );//设置为非阻塞模式
socketChannel.connect (new InetSocketAddress (“http://163.com” ，80) ) ;
channel.write(byteBuffer);// 发送请求数据-向通道写 入数据
int bytesRead =socketChannel.read ( byteBuffer) ;//读取服务端返回-读取缓冲区 的数据
socketChannel.close (); //关闭连接

write写: write()在尚未写 入任何内容时就可能返回了。需要在循环中调用write()。
read读: read()方 法可能直接返回而根本不读取任何数据，根据返回的int值判断读取了多少字节。

ServerSocketChannel
ServerSocketChannel可以监听新建的TCP连接通道，类似ServerSocket。
//创建网络服务端
ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
serverSocketChannel.configureBlocking(false); //设置为非阻塞模式
serverSocketChannel.socket().bind(new InetSocketAddress(8080)); //绑定端口
while(true){
SocketChannel socketChannel= serverSocketChannel.accept(); //获取新tcp连接通道
if(socketChannel !:= nul){
// tcp请求读取/响应
serverSocketChannelaccept():如果该通道处于非阻塞模式，那么如果没有挂起的连接，该方法将立即返
回null。必须检查返回的SocketChannel是否为null。
这种低效的循环检查，会是NIO服务端的正确开发方式嘛?

Selector选择器
Selector是一个Java NIO组件，可以检查一个或多个NIO通道，并确定哪些通道已准备好进行读取或
写入。实现单个线程可以管理多个通道，从而管理多个网络连接。

一个线程使用 Selector 监听多个 channel 的不同事件:
四个事件分别对应 SelectionKey 四个常量。
1. Connect 连接(SelectionKey.OP_ _CONNECT)
2. Accept 准备就绪(OP_ _ACCEPT)
3. Read 读取(OP_ READ)
4. Write 写入(OP_ _WRITE)

            Thread
           Selector
Channel     Channel      Channel


Selector选择器
实现一个线程处理多个通道的核心概念理解:事件驱动机制。
非阻塞的网络通道下，开发者通过Selector注册对于通道感兴趣的事件类型，线程通过监听事件来
触发相应的代码执行。(拓展: 更底层是操作系统的多路复用机制)
Selector selector = Selector.open();
channel.configureBlocking(false);
SelectionKey key = channel.register(selector, SelectionKey.OP READ); //注册感兴趣的事件
while(true) {//由accept轮询，变成了事件通知的方式。
int readyChannels = selector.select(); // select收到新的事件，方法才会返回
if(readyChannels == 0) continue;
Set<SelectionKey> selectedKeys = selector.selectedKeys();
Iterator<SelectionKey> keylterator = selectedKeys.iterator();
while(keylterator.hasNext()) {
SelectionKey key = keylterator.next();
//判断不同的事件类型，执行对应的逻辑处理
// key.isAcceptable() / key.isConnectable() / key.isReadable() / key.isWritable(}
keylterator.remove();}



NIO对比BI0

BIO线程模型
阻塞lO，线程等待时间长
线程-2 read..write
●一个线程负责一个连接处理
线程多且利用率低

NIO线程模型
单个线程
非阻塞I0，线程利用率更高
●一个线程处理多个连接事件
事件通知机制
性能更强大

如果你的程序需要支撑大量的连接，使用NIO是最好的方式。
Tomcat8中，已经完全去除BIO相关的网络处理代码，默认采用NIO进行网络处理。


Netty简介
Netty是一个高性能、高可扩展性的异步事件驱动的网络应用程序框架，它极大地简化了TCP和UDP客户端和服务器开发等网络编程。
Netty重要的四个内容:
1) Reactor线程模型: -种高性能的多线程程序设计思路
2) Netty中 自己定义的Channel概念:增强版的通道概念
3) ChannelPipeline职责链设计模式:事件处理机制
4) 内存管理:增强的ByteBuf缓冲区


Netty整体结构图
1、 支持Socket等多种传输方式;Legacy Text . Binary Protocols In-VM Pipe
with Unit Testability
2、提供 了多种协议的编解码实现;Extensible Event Model
3、核心设计包含 事件处理模型、APIUniversal Communication API的使用、ByteBuffer的增 强
Zero-Copy-Capable Rich Byte Buffer

Netty线程模型
为了让NIO处理更好的利用多线程特性，Netty实现了Reactor线程模型。
Reactor模型中有四个核心概念:
1) Resources 资源(请求/任务)
2) Synchronous Event Demultiplexer同步事件复用器
3) Dispatcher 分配器
4) Request Handler请求处理器

EventLoopGroup 初始化过程
构造函数->确定线程数量:默认 cpus*2->new Excutor:构建线程执行器
->for->newChild():构建 EventLoop->new EventExecutorChooser

Main EventLoopGroup
    EventLoop
        Executor 线程执行器,EventLoop对应一个线程
            Run 轮训通道时间分配,执行 task 任务
                Task Queue 任务队列
                Selector 事件选择器
    其他 EventLoop

Sub Group
    处理请求
    I/O处理

两组 EventLoop(Main&Sub)处理不同通道不同的事件

责任链模式
为请求创建了一个处理对象的链
发起请求和具体处理请求的过程进行解耦:职责链上的处理者负责处理请求,客户只需要将请求发送到责任链上即可,
无需关心请求的细节和请求的传递

请求---->责任链调用
                    -----> chains
                        --> handler1    --> handler2    --> handler3    --> handler4

责任链模式4 个要素:
    处理器抽象类,具体的处理器实现类,保存处理器信息,处理执行

netty 中的 channelPipeline  (PipelineDemo.java)
Pipeline 管道保存了通道所有处理器信息,创建新 channel 时自动创建一个专有的 pipeline.
入站事件和出站操作会调用 pipeline 上的处理器

入站事件和出站事件
入站事件:通常指I/O线程生成了入站数据。
(通俗理解:从socket底层自己往上冒上来的事件都是入站)
比如EventLoop收到selector的OP_READ事件， 入站处理器调用socketChannel.read(ByteBuffer)
接收到数据后，这将导致通道的ChannelPipeline中包含的下一个中的channelRead方法被调用。
出站事件:经常是指I/O线程执行实际的输出操作。
(通俗理解:想主动往socket底层操作的事件的都是出站)
比如bind方法用意是请求server socket绑定到给定的SocketAddress,这将导致通道的
ChannelPipeline中包含的下一个出站处理器中的bind方法被调用。


Netty中事件的定义

            inbound入站事件                                     outbound出站事件

事件                                  描述                             事件                         描述
fireChannelRegistered           channel注册事件                       bind                      端口绑定事件
fireChannelUnregistered         channel解除注册事件                   connect                    连接事件
fireChannelActive               channel活跃事件                     disconnect                  断开连接事件
fireChannellnactive             channel非活跃事件                    close                       关闭事件
fireExceptionCaught                 异常事件                        deregister                  解除注册事件
fireUserEventTriggered          用户自定义事件                         flush                   刷新数据到网络事件
fireChannelRead                 channel读事                           read                读事件，用于注册 OP_READ到selector
fireChannelReadComplete         channel读完成事件
fireChannelWritabilityChanged   channel写状态变化事件                  write                          写事件
                                                                    writeAndFlush                写出数据事件
Pipeline中的handler是什么
ChannelHandler:用于处理I/o事件或拦截I/o操作,并转发到ChannelPipeline中的下一个处理器。
这个顶级接口定义功能很弱，实际使用时会去实现下面两大子接口:
处理入站I/O事件的ChannelInboundHandler.处理出站I/O操作的ChannelOutboundHandler
适配器类:为了开发方便，避免所有handler去实现一遍接口方法，Netty提供了简单的实现类:
ChannelInboundHandlerAdapter处理入站I/O事件
ChannelOutboundHandlerAdapter来处理出站I/O操作
ChannelOutDuplexHandler来支持同时处理入站和出站事件
ChannelHandlerContext:实际存储在Pipeline中的对象并非ChannelHandler,而是上下文对象。
将handler,包裹在上下文对象中，通过上下文对象与它所属的ChannelPipeline交互，向上或向下传递事件
或者修改pipeline都是通过上下文对象。

维护Pipeline中的handler
ChannelPipeline是线程安全的，ChannelHandler可以在任何时候添加或删除。
例如，你可以在即将交换敏感信息时插入加密处理程序,并在交换后删除它。
一般操作,初始化的时候增加进去，较少删除。下面是Pipeline中管理handler的API

ChannelDuplexHandler 5
Outbound Handler 4
Outbound Handler 3
Inbound Handler 2
Inbound Handler 1

handler的执行分析
当前的ChannelPipeline
当入站事件时，执行顺序是1、2、3、4、5
当出站事件时，执行顺序是5、4、3、2、1
在这-原则之上，ChannelPipeline在执行时会进行选择
3和4为出站处理器，因此入站事件的实际执行是:1、2、5
1和2为入站处理器，因此出站事件的实际执行是:5、4、3
不同的入站事件会触发handler不同的方法执行:
上下文对象中fire**开头的方法，代表入站事件传播和处理
其余的方法代表出站事件的传播和处理。

pipeline 分析的四要素:
    什么事件,有哪些处理,哪些会被触发,执行顺序

Netty 的零拷贝机制

Netty自己的ByteBuf  (ByteBufDemo)
    ByteBuf是为解决ByteBuffer的问题和满足网络应用程序开发人员的日常需求而设计的。
    JDK ByteBuffer的缺点:
    无法动态扩容
    长度是固定，不能动态扩展和收缩，当数据大于ByteBuffer容量时，会发生索引越界异常。
    API使用复杂
    读写的时候需要手工调用flip()和rewind()等方法，使用时需要非常谨慎的使用这些api,
    否则很容出现错误

ByteBuf 做了哪些增强
    API 操作更便捷
    动态扩容
    多种 ByteBuf 实现
    高效的零拷贝机制

ByteBuf 操作

下图显示了一个缓冲区是如何被两个指针分割成三个区域的

    discardable bytes               readable bytes                writeable bytes
     已读可丢弃区域                     可读区域                         待写区域
0       <=          readableIndex       <=      writeableIndex          <=          capacity


ByteBuf幼恣折容
capacity 默人値: 256字节、最大値: Integer.MAX_VALUE ( 2GB)
write 方法凋用吋，通辻 AbstractByteBuf.ensureWritable() 迸行檢査。
容量计算方法: AbstractByteBufAllocator.calculateNewCapacity (新 capacity 的最小要求，capacity 最大値)
根据新 capacity 的最小値要求，対座有兩套计算方法:
没超过4兆:从64字节幵始，毎次増加一倍，直至计算出来的 newCapacity 満足新容量最小要求。
示例:当前大小256, 已写250, 継銕写10字芍数据，需要的容量最小要求是261，則新容量是64*2*2*2=512
超过4兆:新容量=新容量最小要求/4兆* 4兆+ 4兆
示例:当前大小3兆，已写3兆，継銕写2兆数据,需要的容量最小要求是5兆，則新容量是9兆(不能超过最大値)。

选择合适的ByteBuf实现

了解核心的: 3个维度的划分方式，8种具体实现

堆内/堆外            是否池化            访问方式                        具体实现类                       备注
heap堆内             unpool              safe                    UnpooledHeapByteBuf                 数组实现
heap堆内             unpool              unsafe                  UnpooledUnsafeHeapByteBuf          Unsafe类直接操作内存
heap堆内              pool               safe                     PooledHeapByteBuf
heap堆内              pool               unsafe                   PooledUnsafeHeapByteBuf
direct堆外            unpool              safe                    UnpooledDirectByteBuf               NIO DirectBy'teBuffer
direct堆外            unpool              unsafe                  UnpooledUnsafeDirectByteBuf
direct堆外            pool                safe                    PooledDirectByteBuf
direct堆外            pool                unsafe                  PooledUnsafeDirectByteBuf

在使用中，都是通过ByteBufAllocator分配器进行申请，同时分配器具备有内存管理的功能

Unsafe的实现
unsafe意味着不安全的操作。但是更底层的操作会带来性能提升和特殊功能，Netty中会尽力使用unsafe。
Java语言很重要的特性是“一次编写到处运行”,所以它针对底层的内存或者其他操作,做了很多封装。
而unsafe提供了一系列我们操作底层的方法，可能会导致不兼容或者不可知的异常。

Info.仅返回-些低级的内存信息
addressSize
pageSize

Objects.提供用于操作对象及其字段的方法
allocatelnstance
objectFieldOffset

Classes提供用于操作类及其静态字段的方法
staticFieldOffset
defineClass
defineAnonymousClass
ensureClasslnitialized

Synchronization.低級的同歩原悟
monitorEnter
tryMonitorEnter
monitorExit
compareAndSwaplnt
putOrderedInt

Memory.直接访问内存方法
allocateMemory
copyMemory
getAddress
getInt
putlnt

Arrays.操作数组
arrayBaseOffset
arraylndexScale


PooledByteBuf对象、内存复用
PoolThreadCache : PooledByteBufAllocator 实例维护的一个线程变量。
多种分类的MemoryRegionCache数组用作内存缓存，MemoryRegionCache内部是 链表，队列里面存Chunk。
PoolChunk里面维护了内存引用，内存复用的做法就是把buf的memory指向chunk的memory。
PooledByteBufAllocator.ioBuffer运作过程梳理:

                    allocate                             1.创建或复制ByteBuf 对象
EventLoop-Thread --------------> Arena 负责buf分配管理    2.尝试从对应的缓存复用内存空间
                                                         3.无缓存时从内存中申请



零拷贝机制  (ZeroCopyTest.java)
Netty的零拷贝机制，是一种应用层的实现。和底层JVM、操作系统内存机制并无过多关联。

1、CompositeByteBuf, 将多个ByteBuf合并为一个逻辑上的ByteBuf,避免了各个ByteBuf之间的拷贝。
CompositeByteBuf compositeByteBuf =Unpooled.compositeBuffer();                      new Buffer复合缓冲区(虚拟)
ByteBuf newBuffer = compositeByteBuf.addComponents(true, buffer1, buffer2);         buffer1  buffer2 ...

2、wrapedBuffer()方法 ，将byte[]数组包装成ByteBuf对象。                               array        buffer
ByteBuf newBuffer = Unpooled.wrappedBuffer(new byte[{1,2,3,4,5});                 {1,2,3}       memory

3、slice()方法。 将一个ByteBuf对象切分成多个ByteBuf对象。                              buffer       new buffer
ByteBuf buffer1 = Unpooled.wrappedBuffer("hello".getBytes());                        hello         memory
ByteBuf newBuffer = buffer1.slice(1, 2);                                                          unwarp


使用 byteBuf 是 Netty 高性能很重要的一个原因


推送系统功能设计&优化百万连接 (TestCenter.java)

尝试自己实现
短连接:请求/响应之后，关闭已经建立的TCP连接，下次请求再建立一次连接。
长连接:请求/响应之后，不关闭TCP连接，多次请求，复用同一个连接。
为了避免频繁创建连接/释放连接带来的性能损耗，以及消息获取的的实时性，采用长连接的形式。

                                        推消息
客户端 -> 操作系统底层接口(send缓冲区) -------------> recv缓冲区 服务端
                                        发请求

粘包: Nagle 算法 - 客户端累积一定量或者缓冲一段时间再传输。 服务端缓冲区堆积。导致多个请求数据粘在一起。
拆包:发送的数据大于发送缓冲区，进行分片传输。服务端缓冲区堆积，导致服务端读取的请求数据不完整。


使用 WebSocket

WebSocket 协议是基于 TCP 的一支新的网络协议
它的出现实现了浏览器与服务器全双工(full-duplex)通信:允许服务器主动发送信息给客户端
多客户端多语言多服务器支持:浏览器,php,java,ruby,nginx,python...等等

    客户端                                     服务端
                 GET/chat HTTp/1.1
   请求连接     --------------------->         返回响应
                  HTTP/1.1 101xx
               <--------------------
                        push
    open        --------------------->
                <---------------------
                        send



网络小知识:区分不同连接的方式,TCP 连接四元组
服务器IP + 服务器PORT + 客户端IP + 客户端PORT

服务器端口 9000                                  服务器提供 20 个端口
最多 6W+                      调整               6W*20=120W
客户端的端口号不够用      --------------->        复用客户端 6W+端口监听服务器 20 个端口

netty实战
0、启动客户端和服务端

#测试环境: centos7 jdk8 2核4G

#服务端启动
java -Xmx4096m -Xms4096m -Dnetease . debug=true -cp netty-all-4.1.32.Final.jar:netty-push-1.0.0.jar push.server.WebSocketServer

#客户端
java - Xmx4096m -Xms4096m -Dnetease. debug false -Dnetease. pushserver .host=192.168.100.241 -cp netty-all-4.1.32.Final.jar:netty-push-1.0.0.jar
push.client.WebSocketClient

1、too many openFiles 服务端和测试机都改一下

#进程最大文件打开添加参数最大限制
vi /etc/security/limits . conf
* soft nofile 1000000
* hard nofile 1000000

#全局隈制cat /proc/sys/fs/file-nr
echo 1200000 > /proc/sys/fs/file-max

2、客户端问题汇总

#客户机开不了这么多连接，可能的问题原因端口开放数
linux对外随机分配的端口是有限制,理论上单机对外端口数可达65535,但实际对外可建立的连接默认最大只有28232个
查看: cat /proc/sys/net/ipv4/ip_ 1ocal port_ range
echo "net. ipv4.ip_ 1ocal port_ range= 1024 65535">> /etc/sysct1. conf
sysctl -p

#这个也设置了
sysctl -W net.ipv4.tcp_tw_recycle=1 #快速回收time_wait的连接
sysctl -W net.ipv4.tcp_tw_reuse=1
sysctl -W net.ipv4.tcp_timestamps=1

3、可能的问题

#如果发现自己的用例跑不上去，就看有linux日志
#linux日志
1、nf. conntrack: table full, dropping packet 表示防火墙的表满了，加大nf_conntrack_max 参数
echo "net.nf_ conntrack max .1000000">> /etc/sysctl. conf

# 2、TCP: too many orphaned sockets 表示内存不太够，拒绝分配，一般就是TCP缓神区内存不够用，调大一点
# cat /proc/sys/net/ipv4/tcp. _mem
echo "net. ipv4.tcp. mem = 786432 2097152 16777216">> /etc/sysctl.conf
echo "net. ipv4.tcp. rmem = 4096 4096 16777216">> /etc/sysct1.conf
echo "net.ipv4.tcp_ _wmem . 4096 4096 16777216>> /etc/sysctl. conf
sysctl -P

4、常规监控

#查看某个端口的连接情况
netstat -natlgrep -i "9001"|wc -1
netstat -n | avk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'

#网络接口的带宽使用情况
#tcpdump htts://www.cnblogs.com/maifengqiang/p/3863168.html

# glances工具
yum install -y glances
glances 控制台查看
glances -s 服务器模式查看

如果是自己的虚拟机,要记得关闭防火墙
systemctl stop firewalld.service


优化 2 - 提高请求/推送的吞吐量

1.业务操作提交到单独的线程执行
2.调整 TCP 缓冲区大小,提高网络吞吐量
3.基于 netty 框架开发时,业务代码逻辑的调优

Netty 在网易内部的实现

1.并发连接数主要靠操作系统参数调优
2.吞吐量的提升,主要靠代码处理能力来提升
3.有时候网络和磁盘会成为瓶颈
4.水平扩展,集群的方式是最终方案









