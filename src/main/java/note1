0.bio

1.nio
    nio-selector
    client注册自己感兴趣事件
    Thread 轮询每个client是否有事件到达 如果有就一个一个处理 顺序处理完继续检测


2.Reactor模型：
Reactor中的组件：
    1.Reactor：IO事件的派发者
    2.Handler：和一个client通讯的实体，按这样的过程实现业务的处理
    3.Acceptor：接受client连接，建立对应的client的Handler，并向Reactor注册此Handler


nio核心组件：
    channel、unsafe、buffer、selector

io多路复用：


1.默认情况下，netty服务端启多少个线程？
2.Netty是如何解决jdk空循环的bug
3.netty如何保证异步串行化


 * SimpleChannelInboundHandler 和 ChannelInboundHandlerAdapter 的区别:
 * SimpleChannelInboundHandler 中的 channelRead0 方法会自动释放接收到来自于对方 msg 的所占资源
 * ChannelInboundHandlerAdapter 不会自动是否接受到来自于对方 msg 的所占资源
 * 若对方没有向自己发送数据,则自定义处理器建议继承 ChannelInboundHandlerAdapter,因为若继承 SimpleChannelInboundHandler
 * 需要重写 channelRead0 方法 ,而重写该方法的目的是对来自于对方的数据进行处理,因为对方根本就没有发送数据,所以也就没有必要重写该方法
 *
 * 继承 ChannelInboundHandlerAdapter .因为 write() 方法的执行是异步的且 SimpleChannelInboundHandler 中的 channelRead 方法
 * 会自动释放来自于对方的 msg


拆包和粘包:















